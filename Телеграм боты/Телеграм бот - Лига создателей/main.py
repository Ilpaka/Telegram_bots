import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from PIL import Image, ImageDraw, ImageFont, ImageOps
import io
from aiogram.types import BufferedInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from aiogram.filters.state import StateFilter
from aiogram.types import CallbackQuery
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload


logging.basicConfig(level=logging.INFO)

API_TOKEN = ""

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets --
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_name("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç - –õ–∏–≥–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π/credentials/tonal-rune-446721-p0-6ba0dd0feadc.json", scope)
client = gspread.authorize(creds)

sheet = client.open("Liga_Sozdateley_Registrations").sheet1

EXPECTED_HEADERS = [
    "ID",
    "tg_id",
    "tg_username",
    "tg_link",
    "status",
    "fullname",
    "age",
    "phone",
    "presentation",
    "project_name",
    "project_info",
    "target_audience",
    "branding",
    "goals",
    "participant_help",
    "participant_learn"
]

def increment_prefix(prefix: str) -> str:
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç '–ø—Ä–µ—Ñ–∏–∫—Å' –≤ —Å—Ç–∏–ª–µ base-26 (A..Z -> AA..ZZ -> AAA..).
    –ü—Ä–∏–º–µ—Ä:
      'A'  -> 'B'
      'Z'  -> 'AA'
      'AZ' -> 'BA'
      'ZZ' -> 'AAA'
    """
    chars = list(prefix)
    i = len(chars) - 1
    while i >= 0:
        if chars[i] < 'Z':
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –±—É–∫–≤–∞ –º–µ–Ω—å—à–µ 'Z', –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ—ë
            chars[i] = chr(ord(chars[i]) + 1)
            return "".join(chars)
        else:
            # –ï—Å–ª–∏ 'Z', –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ—ë –≤ 'A' –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ –≤–ª–µ–≤–æ
            chars[i] = 'A'
            i -= 1
    # –ï—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –±—ã–ª–∏ 'Z', —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º 'A' –≤ –Ω–∞—á–∞–ª–µ
    return "A" + "".join(chars)

def increment_id(last_id: str) -> str:
    """
    last_id –∏–º–µ–µ—Ç –≤–∏–¥ 'A0', 'B7', 'Z9', 'AA3' –∏ —Ç.–¥.
    –ü—Ä–µ—Ñ–∏–∫—Å (–≤—Å—ë –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞) ‚Äî –±—É–∫–≤—ã A..Z, AA..ZZ, ...
    –°—É—Ñ—Ñ–∏–∫—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª) ‚Äî —Ü–∏—Ñ—Ä–∞ 0..9.
    
    –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:
      A0 -> A1 -> A2 ... A9 -> B0 -> B1 ... Z9 -> AA0 -> AA1 ...
    """
    prefix = last_id[:-1]  # –≤—Å—ë, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
    suffix_char = last_id[-1]  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª ‚Äî —Ü–∏—Ñ—Ä–∞
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int (—Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤ ID –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞)
    suffix = int(suffix_char)

    if suffix < 9:
        # –ü—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
        return f"{prefix}{suffix + 1}"
    else:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –≤ 0 –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        new_prefix = increment_prefix(prefix)
        return f"{new_prefix}0"


async def generate_id():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π ID –≤–∏–¥–∞ A0..A9 -> B0..B9 -> ... -> Z9 -> AA0..AA9 -> AB0..AB9 -> ...
    """
    try:
        records = sheet.get_all_records(expected_headers=EXPECTED_HEADERS)
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å A0
        if not records:
            return "A0"
        last_id = records[-1]['ID']
        return increment_id(last_id)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∏–∑ Google Sheets", exc_info=True)
        # –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫–æ–π-—Ç–æ –¥–µ—Ñ–æ–ª—Ç –∏–ª–∏ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –¥–∞–ª—å—à–µ
        raise e


class RegistrationForm(StatesGroup):
    status = State()
    fullname = State()
    age = State()
    phone = State()
    presentation = State()
    # –°–æ–∑–¥–∞—Ç–µ–ª—å
    project_name = State()
    project_info = State()
    target_audience = State()
    branding = State()
    goals = State()
    # –£—á–∞—Å—Ç–Ω–∏–∫
    participant_help = State()
    participant_learn = State()

    wait_for_subscription = State()
    wait_for_subscription_leader = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
status_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç–µ–ª—å")],
        [KeyboardButton(text="–£—á–∞—Å—Ç–Ω–∏–∫")]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üò∫\n"
        "–Ø –ø–æ–º–æ–≥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –õ–∏–≥–∏ –°–æ–∑–¥–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø "
        "–∫ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ.\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ—é —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –±–µ–π–¥–∂ –¥–ª—è –§–æ—Ä—É–º–∞ üê±"
    )
    await message.answer(welcome_text, parse_mode="HTML")

    telegram_id = message.from_user.id
    username = message.from_user.username or ""
    user_link = f"https://t.me/{username}" if username else ""

    await state.update_data(
        tg_id=telegram_id,
        tg_username=username,
        tg_link=user_link
    )

    await state.set_state(RegistrationForm.status)
    await message.answer(
        "–í—ã –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –£—á–∞—Å—Ç–Ω–∏–∫?",
        reply_markup=status_keyboard
    )

@router.message(RegistrationForm.status)
async def process_status(message: types.Message, state: FSMContext):
    await state.update_data(status=message.text)
    await state.set_state(RegistrationForm.fullname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())

@router.message(RegistrationForm.fullname)
async def process_fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await state.set_state(RegistrationForm.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")


@router.message(RegistrationForm.age)
async def process_age(message: types.Message, state: FSMContext):
    age_str = message.text.strip()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–±–µ–∑ –∑–Ω–∞–∫–æ–≤ +, - –∏ —Ç.–¥.)
    if not re.match(r'^\d+$', age_str):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):")
        return

    # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
    age = int(age_str)

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if age < 13:
        # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ù–∞–ø–∏—Å–∞—Ç—å @sash_alexandrovn",
                        url="https://t.me/sash_alexandrovn"
                    )
                ]
            ]
        )
        await message.answer(
            "–ï—Å–ª–∏ –≤–∞–º –µ—â—ë –Ω–µ—Ç 13 –ª–µ—Ç, —Ç–æ–≥–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –≤ Telegram.\n"
            "–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é:",
            reply_markup=keyboard
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é/–¥–∞–Ω–Ω—ã–µ
        await state.clear()
        return
    elif age > 99:
        await message.answer(
            "–û–ì–û! –í—ã –∑–Ω–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç? –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç?\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç:"
        )
        return

    # –ï—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
    await state.update_data(age=age_str)
    
    # –î–∞–ª–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    await state.set_state(RegistrationForm.phone)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True
        )
    )

@router.message(RegistrationForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.contact:
        phone_number = message.contact.phone_number
    else:
        phone_number = message.text
        if not re.match(r'^\+?\d{10,15}$', phone_number):
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890:"
            )
            return
    await state.update_data(phone=phone_number)
    await state.set_state(RegistrationForm.presentation)

    data = await state.get_data()
    if data['status'].lower() == "—Å–æ–∑–¥–∞—Ç–µ–ª—å":
        await message.answer(
            '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø—ã—Ç, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å).',
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ–º —É–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å).',
            reply_markup=ReplyKeyboardRemove()
        )

@router.message(RegistrationForm.presentation)
async def process_presentation(message: types.Message, state: FSMContext):
    await state.update_data(presentation=message.text)
    data = await state.get_data()

    if data['status'].lower() == "—Å–æ–∑–¥–∞—Ç–µ–ª—å":
        await state.set_state(RegistrationForm.project_name)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å–µ–∫—Ü–∏–∏:")
    else:
        await state.set_state(RegistrationForm.participant_help)
        await message.answer(
            '–ö–æ–º—É –∏ —á–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞–º?'
        )

# ---------------- –°–æ–∑–¥–∞—Ç–µ–ª—å ---------------- #

@router.message(RegistrationForm.project_name)
async def process_project_name(message: types.Message, state: FSMContext):
    await state.update_data(project_name=message.text)
    await state.set_state(RegistrationForm.project_info)
    await message.answer(
        '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ (—Å—É—Ç—å, —Ü–µ–ª—å, –ø—Ä–∏–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏).'
    )

@router.message(RegistrationForm.project_info)
async def process_project_info(message: types.Message, state: FSMContext):
    await state.update_data(project_info=message.text)
    await state.set_state(RegistrationForm.target_audience)
    await message.answer('–î–ª—è –∫–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞—à –ø—Ä–æ–µ–∫—Ç? (–≤–æ–∑—Ä–∞—Å—Ç, —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)')

@router.message(RegistrationForm.target_audience)
async def process_target_audience(message: types.Message, state: FSMContext):
    await state.update_data(target_audience=message.text)
    await state.set_state(RegistrationForm.branding)
    await message.answer('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞? (–î–∞/–ù–µ—Ç)')

@router.message(RegistrationForm.branding)
async def process_branding(message: types.Message, state: FSMContext):
    await state.update_data(branding=message.text)
    await state.set_state(RegistrationForm.goals)
    await message.answer(
        '–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç–µ, —É—á–∞—Å—Ç–≤—É—è –≤ —Ñ–æ—Ä—É–º–µ? (–ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º –∏ —Ç.–¥.)'
    )

@router.message(RegistrationForm.goals)
async def process_goals_subscribe(message: types.Message, state: FSMContext):
    """
    –í–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ Google Sheets ‚Äî –ø—Ä–æ—Å–∏–º –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.
    –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!" —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ (—Å–º. callback –Ω–∏–∂–µ).
    """
    await state.update_data(goals=message.text)

    # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:
    # 1) –ö–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    # 2) –ö–Ω–æ–ø–∫–∞ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!" (callback_data="check_sub_leader")
    subscribe_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                    url="https://t.me/LigaSozdateley"  # –≤–∞—à –∫–∞–Ω–∞–ª
                )
            ],
            [
                InlineKeyboardButton(
                    text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!",
                    callback_data="check_sub_leader"
                )
            ]
        ]
    )

    await message.answer(
        "–û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω —à–∞–≥! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –°–æ–∑–¥–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
        reply_markup=subscribe_keyboard
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –Ω–∞–∂–∞—Ç–∏—è "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!"
    await state.set_state(RegistrationForm.wait_for_subscription_leader)


##############################################################################
# 2. CALLBACK-–•–ï–ù–î–õ–ï–†, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!" —É –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
##############################################################################

@router.callback_query(
    F.data == "check_sub_leader",  # callback_data –∏–∑ –∫–Ω–æ–ø–∫–∏
    StateFilter(RegistrationForm.wait_for_subscription_leader)
)
async def check_subscription_leader_callback(call: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.
    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Sheets, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.
    """
    channel_id = "@LigaSozdateley"  # –∏–ª–∏ numeric ID, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –±–æ—Ç –∞–¥–º–∏–Ω

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ getChatMember
    member_info = await bot.get_chat_member(chat_id=channel_id, user_id=call.from_user.id)
    if member_info.status in ("member", "administrator", "creator"):
        # ---- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω ----
        await call.message.delete()

        user_data = await state.get_data()

        try:
            generated_id = await generate_id()
            sheet.append_row([
                generated_id,
                user_data.get('tg_id', ''),
                user_data.get('tg_username', ''),
                user_data.get('tg_link', ''),
                user_data.get('status', ''),
                user_data.get('fullname', ''),
                user_data.get('age', ''),
                user_data.get('phone', ''),
                user_data.get('presentation', ''),
                user_data.get('project_name', ''),
                user_data.get('project_info', ''),
                user_data.get('target_audience', ''),
                user_data.get('branding', ''),
                user_data.get('goals', ''),
                '',  # participant_help
                ''   # participant_learn
            ])
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ (append_row) –¥–∞–Ω–Ω—ã—Ö –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", exc_info=True)
            await call.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await call.answer()
            return

        # –ó–∞–≤–µ—Ä—à–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à ID: <b>{generated_id}</b>\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n"
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: https://t.me/LigaSozdateley\n\n"
            "<a href='https://t.me/Ilya_Panov_projects_bot'>–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –ò–ª—å—è –ü–∞–Ω–æ–≤ (@Pilya_07)</a>",
            parse_mode="HTML"
        )
        await state.clear()

    else:
        # ---- –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω ----
        await call.message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        )

# ---------------- –£—á–∞—Å—Ç–Ω–∏–∫ ---------------- #


@router.message(RegistrationForm.participant_help)
async def process_participant_help(message: types.Message, state: FSMContext):
    await state.update_data(participant_help=message.text)
    await state.set_state(RegistrationForm.participant_learn)
    await message.answer(
        "–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –∑–Ω–∞–Ω–∏—è –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º–µ?"
    )

@router.message(RegistrationForm.participant_learn)
async def process_participant_learn(message: types.Message, state: FSMContext):
    """
    –í–º–µ—Å—Ç–æ –∑–∞–ø–∏—Å–∏ –≤ Sheets –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!" –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É.
    """
    await state.update_data(participant_learn=message.text)

    # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
    # 1) –ö–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª.
    # 2) –ö–Ω–æ–ø–∫–∞ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!" (callback_data="check_sub"), 
    #    –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ.
    subscribe_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                    url="https://t.me/LigaSozdateley"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                )
            ],
            [
                InlineKeyboardButton(
                    text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!",
                    callback_data="check_sub"
                )
            ]
        ]
    )

    await message.answer(
        "–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –°–æ–∑–¥–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
        reply_markup=subscribe_keyboard
    )

    # –¢–µ–ø–µ—Ä—å –∂–¥—ë–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!"
    # (–ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ wait_for_subscription)
    await state.set_state(RegistrationForm.wait_for_subscription)

@router.callback_query(
    F.data == "check_sub",
    StateFilter(RegistrationForm.wait_for_subscription)
)
@router.callback_query(
    F.data == "check_sub",  # callback_data –∏–∑ –∫–Ω–æ–ø–∫–∏
    StateFilter(RegistrationForm.wait_for_subscription)
)
async def check_subscription_callback(call: CallbackQuery, state: FSMContext):
    channel_id = "@LigaSozdateley"  # –ò–ª–∏ numeric ID, –Ω–∞–ø—Ä. -1001234567890

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    member_info = await bot.get_chat_member(chat_id=channel_id, user_id=call.from_user.id)
    if member_info.status in ("member", "administrator", "creator"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        await call.message.delete()
        user_data = await state.get_data()
        try:
            generated_id = await generate_id()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            card_bytes = await generate_user_card(
                bot,
                user_data['tg_id'],
                generated_id,
                user_data['fullname']
            )

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ Google Drive
            card_url = await upload_to_google_drive(card_bytes, generated_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
            sheet.append_row([
                generated_id,
                user_data.get('tg_id', ''),
                user_data.get('tg_username', ''),
                user_data.get('tg_link', ''),
                user_data.get('status', ''),
                user_data.get('fullname', ''),
                user_data.get('age', ''),
                user_data.get('phone', ''),
                user_data.get('presentation', ''),
                '',  # project_name
                '',  # project_info
                '',  # target_audience
                '',  # branding
                '',  # goals
                user_data.get('participant_help', ''),
                user_data.get('participant_learn', ''),
                card_url  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –≤ Google Drive
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —á–∞—Ç
            photo_input = BufferedInputFile(
                file=card_bytes.getvalue(),
                filename="card.png"
            )
            await call.message.answer_photo(
                photo=photo_input,
                caption=
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n"
                    f"–í–∞—à ID: <b>{generated_id}</b>\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n"
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: https://t.me/LigaSozdateley\n\n"
                    "<a href='https://t.me/Ilya_Panov_projects_bot'>–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –ò–ª—å—è –ü–∞–Ω–æ–≤ (@Pilya_07)</a>",
                    parse_mode="HTML"
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
        except Exception:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ (append_row)", exc_info=True)
            await call.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await call.answer()
            return
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        await call.message.answer(
            "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        )
    await call.answer()


# ------------------ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ (Pillow) ------------------

# –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
SERVICE_ACCOUNT_FILE = '–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç - –õ–∏–≥–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π/credentials/tonal-rune-446721-p0-6ba0dd0feadc.json'

# ID –ø–∞–ø–∫–∏ –≤ Google Drive
FOLDER_ID = '1uHEu4DYfAVB9M2SWUwmt9nb6JcbBZwtx'

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ API
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=['https://www.googleapis.com/auth/drive.file']
)
drive_service = build('drive', 'v3', credentials=credentials)


async def upload_to_google_drive(file_bytes: io.BytesIO, user_id: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Google Drive —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É.
    """
    # –ò–º—è —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filename = f"{user_id}.png"

    # –°–æ–∑–¥–∞—ë–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–∑ –±–∞–π—Ç–æ–≤
    media = MediaIoBaseUpload(file_bytes, mimetype='image/png', resumable=True)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞–π–ª–∞
    file_metadata = {
        'name': filename,         # –ò–º—è —Ñ–∞–π–ª–∞ = ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        'parents': [FOLDER_ID]    # ID –ø–∞–ø–∫–∏ –Ω–∞ Google Drive
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    file = drive_service.files().create(
        body=file_metadata,
        media_body=media,
        fields='id'
    ).execute()

    # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ —Å—Å—ã–ª–∫–µ
    drive_service.permissions().create(
        fileId=file['id'],
        body={'type': 'anyone', 'role': 'reader'}
    ).execute()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
    file_url = f"https://drive.google.com/uc?id={file['id']}"
    return file_url



async def generate_user_card(bot, user_id: int, user_id_str: str, fio: str) -> io.BytesIO:
    """
    1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω (photo_card.png) –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.
    2. –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–∏–±–æ –∑–∞–≥–ª—É—à–∫—É).
    3. –í—ã—Ä–µ–∑–∞–µ–º –∫—Ä—É–≥, –¥–æ–±–∞–≤–ª—è–µ–º —á—ë—Ä–Ω—ã–π –∫–æ–Ω—Ç—É—Ä, –≤—Å—Ç–∞–≤–ª—è–µ–º —á—É—Ç—å –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞.
    4. –ü–∏—à–µ–º ID –∏ –§–ò–û (—á—ë—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º) –ø–æ–¥ –∞–≤–∞—Ç–∞—Ä–∫–æ–π.
    5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ BytesIO (PNG).
    """

    # ----- –ü—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º -----
    TEMPLATE_PATH = "–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç - –õ–∏–≥–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π/templates/photo_card.png"
    FONT_PATH = "–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç - –õ–∏–≥–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π/fonts/arial_bolditalicmt.ttf"

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
    template = Image.open(TEMPLATE_PATH).convert("RGBA")
    tpl_width, tpl_height = template.size  # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, ~700√ó700

    # 2. –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    photos = await bot.get_user_profile_photos(user_id, limit=1)
    if photos.total_count > 0:
        file_id = photos.photos[0][0].file_id
        file_obj = await bot.get_file(file_id)
        avatar_bytes = await bot.download_file(file_obj.file_path)
        avatar_image = Image.open(avatar_bytes).convert("RGBA")
    else:
        # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏
        avatar_image = Image.new("RGBA", (300, 300), (128, 128, 128, 255))

    # 3. –î–µ–ª–∞–µ–º –∫—Ä—É–≥ –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —á—ë—Ä–Ω—ã–π –∫–æ–Ω—Ç—É—Ä
    avatar_size = (250, 250)
    circle_avatar = make_circle_avatar(avatar_image, avatar_size)
    circle_avatar_with_border = add_circle_outline(circle_avatar, border=5, color=(0, 0, 0, 255))

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å—Ç–∞–≤–∫–∏ (—á—É—Ç—å –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞)
    avatar_x = (tpl_width - circle_avatar_with_border.width) // 2
    avatar_y = 200
    # –í–∫–ª–µ–∏–≤–∞–µ–º
    template.paste(circle_avatar_with_border, (avatar_x, avatar_y), circle_avatar_with_border)

    # 4. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (ID –∏ –§–ò–û) ‚Äî —à—Ä–∏—Ñ—Ç arial_bolditalicmt.ttf
    draw = ImageDraw.Draw(template)

    font_title = ImageFont.truetype(FONT_PATH, 42)
    font_text = ImageFont.truetype(FONT_PATH, 42)

    # --- ID ---
    id_text = f"ID: {user_id_str}"
    id_x = tpl_width // 2
    id_y = avatar_y + circle_avatar_with_border.height + 75
    draw.text(
        (id_x, id_y),
        id_text,
        font=font_title,
        fill="black",
        anchor="mm"
    )

    # --- –§–ò–û ---
    fio_text = fio
    fio_x = tpl_width // 2
    fio_y = id_y + 50
    draw.text(
        (fio_x, fio_y),
        fio_text,
        font=font_text,
        fill="black",
        anchor="mm"
    )

    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ BytesIO –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    output = io.BytesIO()
    template.save(output, format="PNG")
    output.seek(0)
    return output


def make_circle_avatar(image: Image.Image, size=(250, 250)) -> Image.Image:
    """–í—ã—Ä–µ–∑–∞–µ–º –∫—Ä—É–≥ –∏–∑ –∞–≤–∞—Ç–∞—Ä–∫–∏ (RGBA)."""
    image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)
    mask = Image.new("L", size, 0)
    draw = ImageDraw.Draw(mask)
    draw.ellipse((0, 0, size[0], size[1]), fill=255)
    image.putalpha(mask)
    return image


def add_circle_outline(circle_image: Image.Image, border=3, color=(0,0,0,255)) -> Image.Image:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–∫—Ä—É–≥ –≤—ã—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∫—Ä—É–≥–∞ (RGBA) –æ–±–≤–æ–¥–∫—É (border px).
    """
    w, h = circle_image.size
    new_w = w + border*2
    new_h = h + border*2

    outline_img = Image.new("RGBA", (new_w, new_h), (0,0,0,0))
    outline_draw = ImageDraw.Draw(outline_img)
    outline_draw.ellipse((0, 0, new_w, new_h), fill=color)
    outline_img.alpha_composite(circle_image, dest=(border, border))

    return outline_img
# ---------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----------------

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())