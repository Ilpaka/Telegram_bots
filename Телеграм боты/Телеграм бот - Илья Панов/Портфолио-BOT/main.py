import logging
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    InputMediaPhoto,
    FSInputFile
)
from aiogram.filters import CommandStart
import json
import os


# ------------------------------------------------------------------
# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather
# ------------------------------------------------------------------
API_TOKEN = ""

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
#-------------------------------------------------------------------
#JSON
#-------------------------------------------------------------------
USERS_FILE = "users.json"

def load_user_ids() -> list[int]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return []
    return []

def save_user_ids(user_ids: list[int]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ user_id –≤ JSON-—Ñ–∞–π–ª."""
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_ids, f, ensure_ascii=False, indent=2)

def add_user_id(user_id: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç user_id –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç."""
    ids = load_user_ids()
    if user_id not in ids:
        ids.append(user_id)
        save_user_ids(ids)

# ------------------------------------------------------------------
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª—å–±–æ–º + —Ç–µ–∫—Å—Ç) –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ------------------------------------------------------------------
user_albums = {}

# ------------------------------------------------------------------
# –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/–æ–ø–∏—Å–∞–Ω–∏—è
# ------------------------------------------------------------------
DESCRIPTION = (
    "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
    "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–ª—å—è, —è <b>IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b> —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –¥–∏–∑–∞–π–Ω–µ —Å <b>2020 –≥–æ–¥–∞</b>. \n\n"
    "–Ø –∑–∞–Ω–∏–º–∞—é—Å—å:\n"
    "‚Ä¢ ü§ñ <b>–°–æ–∑–¥–∞–Ω–∏–µ–º Telegram-–±–æ—Ç–æ–≤</b> –ø–æ–¥ –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏.\n"
    "‚Ä¢ üíª <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π —Å–∞–π—Ç–æ–≤ –Ω–∞ Tilda</b> —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π: CRM, –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, —Å–∏—Å—Ç–µ–º —Ä–∞—Å—Å—ã–ª–æ–∫.\n"
    "üéØ –ú–æ—è —Ü–µ–ª—å ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –í–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!\n\n"
    "‚ú® <i>–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–∏ —Ä–∞–±–æ—Ç—ã –Ω–∏–∂–µ</i>!"
)
# ------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏)
# ------------------------------------------------------------------
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìÇ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", callback_data="show_projects")],
    [InlineKeyboardButton(text="üìú –û—Ç–∑—ã–≤—ã", callback_data="show_reviews")],
    [InlineKeyboardButton(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π", url="https://t.me/Pilya_07")]
])

# ------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
# ------------------------------------------------------------------
@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    add_user_id(message.from_user.id)
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    logo = FSInputFile("templates/logo.PNG")  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ª–æ–≥–æ—Ç–∏–ø—É
    await message.answer_photo(
        photo=logo
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_message = await message.answer(
        DESCRIPTION,
        parse_mode="HTML",
        reply_markup=main_keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
    user_albums[message.from_user.id] = {"main_message_id": sent_message.message_id}
# ------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "üìÇ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç"
# ------------------------------------------------------------------
@dp.callback_query(F.data == "show_projects")
async def show_portfolio(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìÇ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç". –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.
    """
    text = (
        "üåê <b>–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</b>\n\n"
        "1Ô∏è‚É£ <a href='https://vakidbook.ru/'>–°–ë–û–†–ù–ò–ö –†–ï–¶–ï–ü–¢–û–í ¬´–î–ª—è —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö¬ª</a> ‚Äî –°–∞–π—Ç –Ω–∞ Tilda —Å –æ–ø–ª–∞—Ç–æ–π –∏ —Ä–∞—Å—Å—ã–ª–∫–æ–π –ø–∏—Å–µ–º\n\n"
        "2Ô∏è‚É£ <a href='http://neyrografinya.ru/woman_neyroclub'>¬´–ú–ê–ì–ò–ù–Ø¬ª</a> ‚Äî –°–∞–π—Ç –Ω–∞ Tilda —Å –æ–ø–ª–∞—Ç–æ–π –∏ —Ä–∞—Å—Å—ã–ª–∫–æ–π –ø–∏—Å–µ–º\n\n"
        "3Ô∏è‚É£ <a href='http://neyrografinya.ru/chakras'>¬´–ß–∞–∫—Ä—ã¬ª</a> ‚Äî –°–∞–π—Ç –Ω–∞ Tilda —Å –æ–ø–ª–∞—Ç–æ–π –∏ —Ä–∞—Å—Å—ã–ª–∫–æ–π –ø–∏—Å–µ–º\n\n"
        "4Ô∏è‚É£ <a href='https://t.me/ibratsave_bot'>¬´Ibratsave¬ª</a> ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π\n\n"
        "5Ô∏è‚É£ <a href='https://t.me/GPT_IP_bot'>¬´GPT's by IP¬ª ‚Äî Telegram-–±–æ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏(–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)</a>\n\n"
        "6Ô∏è‚É£ <a href = 'https://t.me/NEYROGRAFINYA_HAPPYbot'>¬´–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–ª—É–± –í–µ–∑—É–Ω—á–∏–∫–æ–≤ –∏ –°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤¬ª</a> -‚Äî Telegram-–±–æ—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–ª—É–±\n\n"
        "7Ô∏è‚É£ <a href='https://t.me/League_of_Creators_bot'>¬´–õ–∏–≥–∞ –°–æ–∑–¥–∞—Ç–µ–ª–µ–π¬ª</a> ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ ¬´–õ–∏–≥–∞ –°–æ–∑–¥–∞—Ç–µ–ª–µ–π¬ª\n\n"
        "8Ô∏è‚É£ <a href='https://t.me/Krygi_reg_bot'>¬´Krugi¬ª</a> ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´Krygi¬ª\n\n"
        "9Ô∏è‚É£ <a href='https://t.me/iSneaker_bot'> ¬´SneakerBot¬ª</a> ‚Äî Telegram-–±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –¥–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞ \n\n"
        "üîü <a href='https://t.me/AcademicTop_bot'>¬´Academic¬ª</a> ‚Äî Telegram-–±–æ—Ç –¥–ª—è –¥–Ω—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π –≤ ¬´IT TOP¬ª\n‚è¨ –ü—Ä–º–∏–µ—Ä—ã —Ä–∞–±–æ—Ç—ã Telegram-–±–æ—Ç–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ\n\n"
        "1Ô∏è‚É£1Ô∏è‚É£ <u>–ü—Ä–æ–µ–∫—Ç ¬´–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ª–∏–≥–∏¬ª</u> ‚Äî –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π –∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–π –ª–∏–≥–µ\n‚è¨ —Å–º–æ—Ç—Ä–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n\n"
        "‚ö°Ô∏è –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ –∏–ª–∏ –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∏–¥–µ—è - –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π!"
    )
    # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ —Å–≤—è–∑–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ ¬´SneakerBot¬ª", callback_data="send_video_sn_bot")],
        [InlineKeyboardButton(text="üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ ¬´Academic¬ª", callback_data="send_video_it_top_bot")],
        [InlineKeyboardButton(text="üìö –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ë–î", callback_data="send_presentation")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")],
        [InlineKeyboardButton(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π", url="https://t.me/Pilya_07")]
    ])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    user_data = user_albums.get(callback_query.from_user.id)
    if user_data and "main_message_id" in user_data:
        try:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=user_data["main_message_id"],
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
    else:
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback_query.answer()

@dp.callback_query(F.data == "send_presentation")
async def send_presentation(callback_query: types.CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª.
    """
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await callback_query.message.edit_reply_markup()

    try:
        file = FSInputFile("templates/data_base.pptx")  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        sent_message = await callback_query.message.answer_document(
            document=file,
            caption="üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_message_and_back")]
            ])
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_albums[callback_query.from_user.id]["temp_message_id"] = sent_message.message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query
    await callback_query.answer("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")


@dp.callback_query(F.data == "send_video_sn_bot")
async def send_video_1(callback_query: types.CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –æ —Ä–∞–±–æ—Ç–µ Telegram-–±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª.
    """
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await callback_query.message.edit_reply_markup()

    try:
        video = FSInputFile("templates/snaeker_bot.mp4")  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É –≤–∏–¥–µ–æ
        sent_message = await callback_query.message.answer_video(
            video=video,
            caption="üé• –í–∏–¥–µ–æ-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Telegram-–±–æ—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_message_and_back")]
            ])
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_albums[callback_query.from_user.id]["temp_message_id"] = sent_message.message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query
    await callback_query.answer("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


@dp.callback_query(F.data == "send_video_it_top_bot")
async def send_video_2(callback_query: types.CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ –æ —Ä–∞–±–æ—Ç–µ Telegram-–±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª.
    """
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await callback_query.message.edit_reply_markup()

    try:
        video = FSInputFile("templates/IT_top_bot.mp4")  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–∏–¥–µ–æ
        sent_message = await callback_query.message.answer_video(
            video=video,
            caption="üé• –ï—â—ë –æ–¥–Ω–æ –≤–∏–¥–µ–æ –æ —Ä–∞–±–æ—Ç–µ Telegram-–±–æ—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_message_and_back")]
            ])
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_albums[callback_query.from_user.id]["temp_message_id"] = sent_message.message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query
    await callback_query.answer("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


@dp.callback_query(F.data == "delete_message_and_back")
async def delete_message_and_back(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user_data = user_albums.get(callback_query.from_user.id)

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_data and "temp_message_id" in user_data:
        try:
            await bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=user_data["temp_message_id"]
            )
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º temp_message_id –∏–∑ user_data
            user_data.pop("temp_message_id", None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ main_message_id
    if user_data and "main_message_id" in user_data:
        try:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=user_data["main_message_id"],
                text=DESCRIPTION,
                parse_mode="HTML",
                reply_markup=main_keyboard
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ù–∞–∑–∞–¥): {e}")
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
    else:
        logging.warning(f"main_message_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback_query.answer()


# ------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "üìú –û—Ç–∑—ã–≤—ã"
# ------------------------------------------------------------------
@dp.callback_query(F.data == "show_reviews")
async def show_reviews(callback_query: types.CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∏–∑ —Ç—Ä—ë—Ö —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞–∑–∞–¥¬ª.
    –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –ª–∏—à–∞–µ—Ç—Å—è –∫–Ω–æ–ø–æ–∫.
    """
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback_query.from_user.id in user_albums:
        try:
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=user_albums[callback_query.from_user.id]["main_message_id"],
                reply_markup=None
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ —É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∞–ª—å–±–æ–º –æ—Ç–∑—ã–≤–æ–≤
    media = [
        InputMediaPhoto(
            media=FSInputFile("templates/reviev1.png"),
            caption="–û—Ç–∑—ã–≤ ‚Ññ1"
        ),
        InputMediaPhoto(
            media=FSInputFile("templates/reviev2.png"),
            caption="–û—Ç–∑—ã–≤ ‚Ññ2"
        ),
        InputMediaPhoto(
            media=FSInputFile("templates/reviev3.png"),
            caption="–û—Ç–∑—ã–≤ ‚Ññ3"
        ),
        InputMediaPhoto(
            media=FSInputFile("templates/reviev4.png"),
            caption="–û—Ç–∑—ã–≤ ‚Ññ4"
        )
    ]

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º —Å –æ—Ç–∑—ã–≤–∞–º–∏
        sent_album = await callback_query.message.answer_media_group(media=media)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞–∑–∞–¥¬ª
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_from_reviews")],
        [InlineKeyboardButton(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π", url="https://t.me/Pilya_07")]
    ])
    text_msg = await callback_query.message.answer(
        "<b>–û—Ç–∑—ã–≤—ã –º–æ–∏—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Ç–∑—ã–≤—ã –æ—Ç –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–ª.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        parse_mode="HTML",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª—å–±–æ–º –∏ —Ç–µ–∫—Å—Ç)
    user_albums[callback_query.from_user.id]["review_message_ids"] = [m.message_id for m in sent_album] + [text_msg.message_id]

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback_query.answer()

# ------------------------------------------------------------------
# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚Äî –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
# ------------------------------------------------------------------
@dp.callback_query(F.data == "back_from_reviews")
async def back_from_reviews(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    user_data = user_albums.get(callback_query.from_user.id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ (–∞–ª—å–±–æ–º –∏ —Ç–µ–∫—Å—Ç)
    if user_data and "review_message_ids" in user_data:
        for msg_id in user_data["review_message_ids"]:
            try:
                await bot.delete_message(
                    chat_id=callback_query.message.chat.id,
                    message_id=msg_id
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏: {e}")
        del user_data["review_message_ids"]

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_data and "main_message_id" in user_data:
        try:
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=user_data["main_message_id"],
                reply_markup=main_keyboard
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback_query.answer()

# ------------------------------------------------------------------
# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ------------------------------------------------------------------
@dp.callback_query(F.data == "back_main")
async def back_main(callback_query: types.CallbackQuery):
    user_data = user_albums.get(callback_query.from_user.id)
    if user_data and "main_message_id" in user_data:
        try:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=user_data["main_message_id"],
                text=DESCRIPTION,
                parse_mode="HTML",
                reply_markup=main_keyboard
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ù–∞–∑–∞–¥): {e}")
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
    else:
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback_query.answer()
# ------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ------------------------------------------------------------------
# @dp.message()
# async def fallback(message: types.Message):
#     # –ü—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∞–ª—å–±–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
#     await remove_album_if_exists(message.from_user.id, message.chat.id)

#     await message.reply(
#         "ü§î –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
#         reply_markup=main_keyboard
#     )

# ------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
# ------------------------------------------------------------------
# async def remove_album_if_exists(user_id: int, chat_id: int):
#     """
#     –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª—å–±–æ–º —Å –æ—Ç–∑—ã–≤–∞–º–∏,
#     —É–¥–∞–ª—è–µ–º –≤—Å–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –∏ –æ—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å.
#     """
#     if user_id in user_albums:
#         for msg_id in user_albums[user_id]:
#             try:
#                 await bot.delete_message(chat_id, msg_id)
#             except Exception as e:
#                 logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
#         del user_albums[user_id]

# ------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# ------------------------------------------------------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

