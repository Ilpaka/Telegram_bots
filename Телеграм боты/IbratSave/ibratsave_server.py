import os
import shutil
import asyncio
import logging
import uuid
import threading
import time
from urllib.parse import urlparse

import telebot
from telebot import types
import yt_dlp

# –ü–∞–ø–∫–∞ –¥–ª—è –±–æ—Ç–∞
BASE_DIR = "/root/ibratsave"
DOWNLOAD_DIR = os.path.join(BASE_DIR, "downloads")
if not os.path.exists(DOWNLOAD_DIR):
    os.makedirs(DOWNLOAD_DIR)
VIDEO_DIR = DOWNLOAD_DIR

MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB

ADMIN_IDS = {772482922}

DOWNLOAD_REQUESTS = {}
ADMIN_DELETE_REQUESTS = {}
PROGRESS = {}

BOT_TOKEN = ""

DOWNLOAD_FINISHED = False

bot = telebot.TeleBot(BOT_TOKEN)


def safe_edit_message_text(text, chat_id, message_id, reply_markup=None):
    try:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=reply_markup)
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def progress_hook(d):
    """
    –•—É–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ (–æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π PROGRESS).
    """
    global PROGRESS
    if d.get('status') == 'downloading':
        PROGRESS = d


def download_video(url: str, format_id: str, do_postprocess: bool):
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ:
    - –ï—Å–ª–∏ do_postprocess=True, –≤–∫–ª—é—á–∞–µ–º –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å (FFmpeg: H.264 + AAC).
    - –ï—Å–ª–∏ False, —Å–∫–∞—á–∏–≤–∞–µ–º ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª.
    """
    global DOWNLOAD_FINISHED
    DOWNLOAD_FINISHED = False

    ydl_opts = {
        'format': format_id,
        'outtmpl': os.path.join(VIDEO_DIR, '%(title)s-%(id)s.%(ext)s'),
        'progress_hooks': [progress_hook],
    }

    if do_postprocess:
        ydl_opts['postprocessors'] = [
            {
                'key': 'FFmpegVideoConvertor',
                'preferedformat': 'mp4'
            },
            {
                'key': 'FFmpegMetadata'
            }
        ]
        ydl_opts['postprocessor_args'] = [
            '-c:v', 'libx264',
            '-c:a', 'aac',
            '-preset', 'fast',
            '-crf', '23'
        ]
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    safe_edit_message_text("–ö–∞—á–∞–µ–º: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100.0%\n–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 0, 0)
    DOWNLOAD_FINISHED = True
    print("–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ" + (", —Å –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º!" if do_postprocess else ", –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!"))


def progress_updater(chat_id, message_id):
    """
    –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.
    """
    last_text = ""
    while not DOWNLOAD_FINISHED:
        time.sleep(3)
        try:
            if PROGRESS and PROGRESS.get('status') == 'downloading':
                downloaded = PROGRESS.get('downloaded_bytes', 0)
                total = PROGRESS.get('total_bytes') or PROGRESS.get('total_bytes_estimate', 0)
                percent = (downloaded / total * 100) if total else 0
                speed = PROGRESS.get('speed', 0)
                eta = PROGRESS.get('eta', 0)
                blocks = int(percent // 10)
                progress_bar = '‚ñà' * blocks + '‚ñí' * (10 - blocks)
                text = (
                    f"–ö–∞—á–∞–µ–º: {progress_bar} {percent:.1f}%\n"
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded}/{total} –±–∞–π—Ç\n"
                    f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} B/s, ETA: {eta} —Å–µ–∫"
                )
                if text != last_text:
                    safe_edit_message_text(text, chat_id, message_id)
                    last_text = text
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


def get_video_formats(url: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å 360/480/720/1080p (mp4).
    """
    ydl_opts = {'listformats': True, 'quiet': True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        return info.get('formats', [])


def select_format_by_resolution(formats, target_res):
    """
    –ù–∞—Ö–æ–¥–∏–º mp4-—Ñ–æ—Ä–º–∞—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã—Å–æ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ target_res (¬±50).
    """
    candidates = []
    for fmt in formats:
        if fmt.get('ext') != 'mp4':
            continue
        height = fmt.get('height') or 0
        diff = abs(height - target_res)
        if diff <= 50:
            candidates.append((fmt, diff))
    if not candidates:
        return None
    best_fmt = min(candidates, key=lambda x: x[1])[0]
    return best_fmt


def download_instagram_post(url: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Instagram-–ø–æ—Å—Ç–æ–≤ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º).
    """
    global DOWNLOAD_FINISHED
    DOWNLOAD_FINISHED = False
    ydl_opts = {
        'outtmpl': os.path.join(VIDEO_DIR, '%(title)s-%(id)s-%(playlist_index)s.%(ext)s'),
        'progress_hooks': [progress_hook]
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        if 'entries' in info and info['entries']:
            for entry in info['entries']:
                if entry:
                    ydl.download([entry['webpage_url']])
        else:
            ydl.download([url])
    DOWNLOAD_FINISHED = True
    return info


def download_instagram(message, url):
    """
    –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Instagram ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à—É—Ç–æ—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.
    """
    status_msg = bot.send_message(message.chat.id, "–°—Ç–∞—Ä—Ç—É–µ–º! –ù–∞—á–∏–Ω–∞—é –∫–∞—á–∞—Ç—å —ç—Ç–æ—Ç —Å—É–º–∞—Å—à–µ–¥—à–∏–π –ø–æ—Å—Ç... ü§°üöÄ")
    progress_thread = threading.Thread(target=progress_updater, args=(message.chat.id, status_msg.message_id), daemon=True)
    progress_thread.start()

    try:
        info = download_instagram_post(url)
        title = info.get('title', '')
        media_files = [
            os.path.join(VIDEO_DIR, f)
            for f in os.listdir(VIDEO_DIR)
            if f.lower().endswith(('.mp4', '.mov', '.jpg', '.jpeg', '.png'))
        ]
        if not media_files:
            time.sleep(3)
            bot.edit_message_text("–û–π-–æ–π! –ü–æ—Å—Ç —Å–∫–∞—á–∞–Ω, –Ω–æ —Ñ–∞–π–ª—ã –∑–∞—Ç–µ—Ä—è–ª–∏—Å—å... ü§∑‚Äç‚ôÇÔ∏èüôà", message.chat.id, status_msg.message_id)
            return

        bot.edit_message_text("–ë–∞—Ö! –ü–æ—Å—Ç –≥–æ—Ç–æ–≤, –∑–∞–∫–∏–¥—ã–≤–∞—é —Ñ–∞–π–ª—ã –∫ —Ç–µ–±–µ! üéâü§°", message.chat.id, status_msg.message_id)

        for file in media_files:
            file_size = os.path.getsize(file)
            if file_size >= MAX_FILE_SIZE:
                if message.chat.id not in ADMIN_IDS:
                    time.sleep(3)
                    bot.send_message(
                        message.chat.id,
                        "–û–≥–æ, —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π, —á—Ç–æ –Ω–µ –º–æ–≥—É –µ–≥–æ –ø—Ä—è–º –∑–∞–∫–∏–Ω—É—Ç—å! üò±üìè"
                    )
                    if os.path.isdir(file):
                        shutil.rmtree(file, ignore_errors=True)
                    else:
                        os.remove(file)
                else:
                    admin_key = str(uuid.uuid4())[:8]
                    ADMIN_DELETE_REQUESTS[admin_key] = file
                    admin_markup = types.InlineKeyboardMarkup()
                    admin_markup.add(
                        types.InlineKeyboardButton(
                            text="–Ø —Å–∫–∞—á–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç",
                            callback_data=f"delete|{admin_key}"
                        )
                    )
                    bot.send_message(
                        message.chat.id,
                        f"–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞—Å–∫–æ—á–∏–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {file}\n–°–∫–∞—á–∞–π –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–æ—É–Ω! ü§°üëâ",
                        reply_markup=admin_markup
                    )
            else:
                if file.lower().endswith(('.mp4', '.mov')):
                    with open(file, 'rb') as video:
                        bot.send_video(message.chat.id, video, caption=title)
                else:
                    with open(file, 'rb') as photo:
                        bot.send_photo(message.chat.id, photo, caption=title)

        time.sleep(10)
        admin_files = set(ADMIN_DELETE_REQUESTS.values())
        for f in os.listdir(VIDEO_DIR):
            file_path = os.path.join(VIDEO_DIR, f)
            if file_path in admin_files:
                continue
            try:
                if os.path.isdir(file_path):
                    shutil.rmtree(file_path, ignore_errors=True)
                else:
                    os.remove(file_path)
            except Exception as del_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {del_e}")

    except Exception as e:
        bot.edit_message_text(f"–û–π-–æ–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∞—á–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞! üòµ‚Äçüí´ {e}", message.chat.id, status_msg.message_id)


@bot.message_handler(commands=["start"])
def start_handler(message: types.Message):
    welcome_text = (
        "–ô–æ, –ø—Ä–∏–≤–µ—Ç! ü§°üéâ\n\n"
        "–Ø ‚Äî Ibratsave, —Ç–≤–æ–π –±–µ–∑–±–∞—à–µ–Ω–Ω—ã–π –∫–ª–æ—É–Ω-–±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å –≤–∏–¥–æ—Å–∞–º–∏ –∏ —Ñ–æ—Ç–∫–∞–º–∏! ü§™üì∏üé•\n"
        "–°–∫–∏–Ω—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç (VK, Instagram, YouTube ‚Äì –≤—Å—ë, —á—Ç–æ –¥—É—à–µ —É–≥–æ–¥–Ω–æ üòú) –∏ —Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —è –ø—Ä–µ–≤—Ä–∞—â–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –º–∞–≥–∏—é! üöÄüí•\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ–±–ª–∏–∫!\n\n"
        "–ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 50 MB, –æ–±—ã—á–Ω—ã–º —é–∑–µ—Ä–∞–º –æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! üóëÔ∏èü§° –ù–æ –∞–¥–º–∏–Ω–∞–º –º–æ–∂–Ω–æ. üîë"
    )
    bot.send_message(message.chat.id, welcome_text)


@bot.message_handler(func=lambda message: 'http' in message.text)
def link_handler(message: types.Message):
    url = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Instagram
    if "instagram.com" in url:
        download_instagram(message, url)
        return

    # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º YouTube / –¥—Ä—É–≥–æ–µ
    status_msg = bot.send_message(message.chat.id, "–°—Ç–∞—Ä—Ç—É–µ–º! –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã... üé¨üî•")
    try:
        all_formats = get_video_formats(url)
        if not all_formats:
            bot.edit_message_text(
                "–£–ø—Å... –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ. üòï",
                message.chat.id,
                status_msg.message_id
            )
            return

        target_resolutions = [360, 480, 720, 1080, 640, 848, 1280, 1920]
        markup = types.InlineKeyboardMarkup()
        any_found = False

        for res in target_resolutions:
            fmt = select_format_by_resolution(all_formats, res)
            if fmt:
                fid = fmt.get('format_id')
                filesize = fmt.get('filesize') or fmt.get('filesize_approx') or 0
                height = fmt.get('height') or 0
                width = fmt.get('width') or 0
                size_mb = f"{filesize/(1024*1024):.1f} MB" if filesize else "N/A"

                key = str(uuid.uuid4())[:8]
                DOWNLOAD_REQUESTS[key] = (fid, url, filesize)

                btn_text = f"{res}p (ID {fid}) | {width}x{height} | {size_mb}"
                markup.add(
                    types.InlineKeyboardButton(
                        text=btn_text,
                        callback_data=f"download|{key}"
                    )
                )
                any_found = True

        if not any_found:
            bot.edit_message_text(
                "–ù–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö mp4-—Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞ 360/480/720/1080p. üòµ‚Äçüí´",
                message.chat.id,
                status_msg.message_id
            )
            return

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–æ—Å–∞:",
            message.chat.id,
            status_msg.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.edit_message_text(
            f"–£–ø—Å, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤! üòµ {e}",
            message.chat.id,
            status_msg.message_id
        )


@bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("download|"))
def process_download_callback(call: types.CallbackQuery):
    data = call.data.split("|")
    if len(data) < 2:
        return

    key = data[1]
    if key not in DOWNLOAD_REQUESTS:
        bot.send_message(call.message.chat.id, "–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚è∞ü§°")
        return

    format_id, url, filesize = DOWNLOAD_REQUESTS.pop(key)
    msg = call.message

    # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω –∏ —Ä–∞–∑–º–µ—Ä > 50MB
    if filesize and filesize > MAX_FILE_SIZE and (msg.chat.id not in ADMIN_IDS):
        bot.edit_message_text(
            "–û–≥–æ, —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π, —á—Ç–æ –Ω–µ –º–æ–≥—É –µ–≥–æ –ø—Ä—è–º –∑–∞–∫–∏–Ω—É—Ç—å! üò±üìè",
            msg.chat.id,
            msg.message_id
        )
        return

    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ > 50MB (–∏–ª–∏ —é–∑–µ—Ä–æ–≤ < 50MB) —Ä–µ—à–∞–µ–º ‚Äî –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç
    do_postprocess = False
    if filesize and filesize <= MAX_FILE_SIZE:
        do_postprocess = True  # –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤–∫–ª—é—á–∏–º –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ

    bot.edit_message_text("–°—Ç–∞—Ä—Ç—É–µ–º –∫–∞—á–∞—Ç—å –≤–∏–¥–æ—Å! üé¨üî•", msg.chat.id, msg.message_id)

    progress_thread = threading.Thread(
        target=progress_updater,
        args=(msg.chat.id, msg.message_id),
        daemon=True
    )
    progress_thread.start()

    try:
        download_video(url, format_id, do_postprocess)

        info = yt_dlp.YoutubeDL({'quiet': True}).extract_info(url, download=False)
        video_title = info.get('title', '')

        media_files = [
            os.path.join(VIDEO_DIR, f)
            for f in os.listdir(VIDEO_DIR)
            if f.lower().endswith(('.mp4', '.mov', '.jpg', '.jpeg', '.png'))
        ]
        if not media_files:
            time.sleep(3)
            bot.edit_message_text("–û–π! –í–∏–¥–æ—Å —Å–∫–∞—á–∞–Ω, –Ω–æ —Ñ–∞–π–ª—ã –≥–¥–µ-—Ç–æ –∏—Å—á–µ–∑–ª–∏... ü§î", msg.chat.id, msg.message_id)
            return

        bot.edit_message_text("–í–∏–¥–æ—Å –≥–æ—Ç–æ–≤! –ó–∞–∫–∏–¥—ã–≤–∞—é —Ñ–∞–π–ª—ã –∫ —Ç–µ–±–µ! üöÄüéâ", msg.chat.id, msg.message_id)

        for file in media_files:
            file_size = os.path.getsize(file)
            if file_size >= MAX_FILE_SIZE:
                if msg.chat.id not in ADMIN_IDS:
                    time.sleep(3)
                    bot.send_message(msg.chat.id, "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –æ–≥—Ä–æ–º–Ω—ã–π –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏! üé™üò≤")
                    if os.path.isdir(file):
                        shutil.rmtree(file, ignore_errors=True)
                    else:
                        os.remove(file)
                else:
                    admin_key = str(uuid.uuid4())[:8]
                    ADMIN_DELETE_REQUESTS[admin_key] = file
                    admin_markup = types.InlineKeyboardMarkup()
                    admin_markup.add(
                        types.InlineKeyboardButton(
                            text="–Ø —Å–∫–∞—á–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç",
                            callback_data=f"delete|{admin_key}"
                        )
                    )
                    bot.send_message(
                        msg.chat.id,
                        f"–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞—Å–∫–æ—á–∏–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {file}\n–°–∫–∞—á–∞–π –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–æ—É–Ω! ü§°üëâ",
                        reply_markup=admin_markup
                    )
            else:
                if file.lower().endswith(('.mp4', '.mov')):
                    with open(file, 'rb') as video:
                        bot.send_video(msg.chat.id, video, caption=video_title)
                else:
                    with open(file, 'rb') as photo:
                        bot.send_photo(msg.chat.id, photo, caption=video_title)

        time.sleep(10)
        admin_files = set(ADMIN_DELETE_REQUESTS.values())
        for f in os.listdir(VIDEO_DIR):
            file_path = os.path.join(VIDEO_DIR, f)
            if file_path in admin_files:
                continue
            try:
                if os.path.isdir(file_path):
                    shutil.rmtree(file_path, ignore_errors=True)
                else:
                    os.remove(file_path)
            except Exception as del_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {del_e}")

    except Exception as e:
        bot.edit_message_text(f"–û–π-–æ–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∞—á–∞–Ω–∏–∏ –≤–∏–¥–æ—Å–∞! üòµ‚Äçüí´ {e}", msg.chat.id, msg.message_id)


@bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("delete|"))
def delete_video_callback(call: types.CallbackQuery):
    data = call.data.split("|")
    if len(data) < 2:
        return

    key = data[1]
    if key not in ADMIN_DELETE_REQUESTS:
        bot.send_message(call.message.chat.id, "–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚è∞ü§°")
        return

    file_path = ADMIN_DELETE_REQUESTS.pop(key)
    if os.path.exists(file_path):
        if os.path.isdir(file_path):
            shutil.rmtree(file_path, ignore_errors=True)
        else:
            os.remove(file_path)
        bot.edit_message_text("–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–µ—Ä —Å —Å–µ—Ä–≤–µ—Ä–∞! üóëÔ∏èüí•", call.message.chat.id, call.message.message_id)
    else:
        bot.edit_message_text("–ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –ø—Ä–æ–ø–∞–ª, –∫–∞–∫ –∏–ª–ª—é–∑–∏—è! üï≥Ô∏èüòú", call.message.chat.id, call.message.message_id)


if __name__ == "__main__":
    DOWNLOAD_REQUESTS = {}
    ADMIN_DELETE_REQUESTS = {}
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
