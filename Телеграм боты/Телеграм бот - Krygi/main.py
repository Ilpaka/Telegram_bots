import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F
from aiogram.filters.state import StateFilter
from aiogram.types import CallbackQuery

import gspread
from oauth2client.service_account import ServiceAccountCredentials

logging.basicConfig(level=logging.INFO)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = ""
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# ----- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets -----
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    "credentials/tonal-rune-446721-p0-135dd79f17b1.json", scope
)
client = gspread.authorize(creds)
sheet = client.open("KRYGI").sheet1

EXPECTED_HEADERS = [
    "ID", "tg_id", "tg_username", "tg_link", "role", "name", "age", "phone",
    "team", "styles", "battle", "battle_style", "dance_experience"
]

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID —Å –Ω—É–∂–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
async def generate_id_for_user(user_data: dict) -> str:
    role = user_data.get("role", "")
    if role == "–¢–∞–Ω—Ü–æ—Ä-—É—á–∞—Å—Ç–Ω–∏–∫":
        battle = user_data.get("battle", "")
        if battle == "–î–∞":
            prefix = "A"
        else:
            prefix = "B"
    elif role == "–ó—Ä–∏—Ç–µ–ª—å":
        prefix = "C"
    else:
        prefix = "X"
    try:
        records = sheet.get_all_records(expected_headers=EXPECTED_HEADERS)
        max_num = 0
        for record in records:
            rec_id = record.get("ID", "")
            if rec_id.startswith(prefix):
                num_part = rec_id[len(prefix):]
                try:
                    num = int(num_part)
                    if num > max_num:
                        max_num = num
                except ValueError:
                    continue
        new_id = f"{prefix}{max_num + 1}"
        return new_id
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID", exc_info=True)
        return f"{prefix}1"

# ----- FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –¥–ª—è –≤—Å–µ—Ö) -----
class RegistrationFormKrygi(StatesGroup):
    role = State()            # –¢–∞–Ω—Ü–æ—Ä-—É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –ó—Ä–∏—Ç–µ–ª—å
    name = State()            # –§–ò–û –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º
    age = State()             # –í–æ–∑—Ä–∞—Å—Ç
    phone = State()           # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–∞–Ω—Ü–æ—Ä–æ–≤)
    team = State()            # –ö–æ–º–∞–Ω–¥–∞/–∫–æ–ª–ª–µ–∫—Ç–∏–≤
    styles = State()          # –°—Ç–∏–ª—å(–∏)
    battle = State()          # –£—á–∞—Å—Ç–∏–µ –≤ –±–∞—Ç—Ç–ª–æ–≤–æ–º –ø–æ–∫–∞–∑–µ (–î–∞/–ù–µ—Ç)
    battle_style = State()    # –ï—Å–ª–∏ —É—á–∞—Å—Ç–≤—É—é—Ç ‚Äì –≤ –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ
    # –î–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π
    dance_experience = State()    # –¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç

# ----- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start -----
@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ tg_id –∏ —Ç.–¥.
    await state.update_data(
        tg_id=message.from_user.id,
        tg_username=message.from_user.username or "",
        tg_link=(f"https://t.me/{message.from_user.username}" if message.from_user.username else "")
    )
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç ‚úåüèª\n"
        "–Ø –ø–æ–º–æ–≥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ KRYGI –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
        "üòä–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "_–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö._"
    )
    await message.answer(welcome_text)
    
    role_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–∞–Ω—Ü–æ—Ä-—É—á–∞—Å—Ç–Ω–∏–∫")],
            [KeyboardButton(text="–ó—Ä–∏—Ç–µ–ª—å")]
        ],
        resize_keyboard=True
    )
    await state.set_state(RegistrationFormKrygi.role)
    await message.answer("–¢—ã —Ç–∞–Ω—Ü–æ—Ä-—É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –∑—Ä–∏—Ç–µ–ª—å?", reply_markup=role_keyboard)

@router.message(RegistrationFormKrygi.role)
async def process_role(message: types.Message, state: FSMContext):
    role = message.text.strip()
    if role not in ["–¢–∞–Ω—Ü–æ—Ä-—É—á–∞—Å—Ç–Ω–∏–∫", "–ó—Ä–∏—Ç–µ–ª—å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –¢–∞–Ω—Ü–æ—Ä-—É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –ó—Ä–∏—Ç–µ–ª—å.")
        return
    await state.update_data(role=role)
    await state.set_state(RegistrationFormKrygi.name)
    await message.answer("–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–§–∞–º–∏–ª–∏—è –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º)", reply_markup=ReplyKeyboardRemove())

@router.message(RegistrationFormKrygi.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await state.set_state(RegistrationFormKrygi.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")

@router.message(RegistrationFormKrygi.age)
async def process_age(message: types.Message, state: FSMContext):
    age_text = message.text.strip()
    data = await state.get_data()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì —Ç–∞–Ω—Ü–æ—Ä, –ø—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    if data.get("role") == "–¢–∞–Ω—Ü–æ—Ä-—É—á–∞—Å—Ç–Ω–∏–∫":
        if not age_text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20).")
            return
        age = int(age_text)
        if age < 12:
            await message.answer("–ï—Å–ª–∏ –≤–∞–º –µ—â—ë –Ω–µ—Ç 12 –ª–µ—Ç, —Ç–æ–≥–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é: https://t.me/l_e_23")
            await state.clear()
            return
        if age > 100:
            await message.answer("–û–ì–û! –í—ã –∑–Ω–∞–µ—Ç–µ —á—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            return  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    # –î–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, –ª—é–±–æ–π –≤–≤–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è
    await state.update_data(age=age_text)
    await state.set_state(RegistrationFormKrygi.phone)
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890):",
        reply_markup=phone_keyboard
    )

@router.message(RegistrationFormKrygi.phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text.strip()
        if not re.match(r'^\+?\d{10,15}$', phone):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: +1234567890")
            return
    await state.update_data(phone=phone)
    data = await state.get_data()
    if data.get("role") == "–¢–∞–Ω—Ü–æ—Ä-—É—á–∞—Å—Ç–Ω–∏–∫":
        await state.set_state(RegistrationFormKrygi.team)
        await message.answer("–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É/–∫–æ–ª–ª–µ–∫—Ç–∏–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å?", reply_markup=ReplyKeyboardRemove())
    else:
        await state.set_state(RegistrationFormKrygi.dance_experience)
        await message.answer("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç?\n(–ü—Ä–∏–º–µ—Ä: –î–∞, 7 –ª–µ—Ç –∑–∞–Ω–∏–º–∞–ª—Å—è —ç—Å—Ç—Ä–∞–¥–Ω—ã–º–∏/–ù–µ—Ç, –Ω–æ —Ö–æ—á—É –ø—Ä–∏–π—Ç–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)", reply_markup=ReplyKeyboardRemove())

@router.message(RegistrationFormKrygi.team)
async def process_team(message: types.Message, state: FSMContext):
    team = message.text.strip()
    await state.update_data(team=team)
    await state.set_state(RegistrationFormKrygi.styles)
    await message.answer("üíÅüèª‚Äç‚ôÄÔ∏è–£–∫–∞–∂–∏ –°—Ç–∏–ª—å(–∏), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å:\n\n(–ü—Ä–∏–º–µ—Ä:\n‚Ä¢ –•–∏–ø-–•–æ–ø/–•–∞—É—Å/–ö–æ–Ω—Ç–µ–º–ø‚Ä¶\n–∏–ª–∏\n‚Ä¢ –ê–≤—Ç–æ—Ä—Å–∫–∞—è —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è/–°–º–µ—à–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏)")

@router.message(RegistrationFormKrygi.styles)
async def process_styles(message: types.Message, state: FSMContext):
    styles = message.text.strip()
    await state.update_data(styles=styles)
    battle_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data="battle_yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="battle_no")
        ]
    ])
    await state.set_state(RegistrationFormKrygi.battle)
    await message.answer("–ë—É–¥–µ—à—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–π —Å—Ç–∏–ª—å –≤ –±–∞—Ç—Ç–ª–æ–≤–æ–º –ø–æ–∫–∞–∑–µ?", reply_markup=battle_keyboard)

@router.callback_query(F.data == "battle_yes", StateFilter(RegistrationFormKrygi.battle))
async def process_battle_yes(call: CallbackQuery, state: FSMContext):
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await state.update_data(battle="–î–∞")
    await state.set_state(RegistrationFormKrygi.battle_style)
    await call.message.answer("–í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ?")

@router.callback_query(F.data == "battle_no", StateFilter(RegistrationFormKrygi.battle))
async def process_battle_no(call: CallbackQuery, state: FSMContext):
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await state.update_data(battle="–ù–µ—Ç", battle_style="")  # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø—É—Å—Ç—ã–º
    await finish_registration(call.message, state)

@router.message(RegistrationFormKrygi.battle_style)
async def process_battle_style(message: types.Message, state: FSMContext):
    battle_style = message.text.strip()
    await state.update_data(battle_style=battle_style)
    await finish_registration(message, state)

@router.message(RegistrationFormKrygi.dance_experience)
async def process_dance_experience(message: types.Message, state: FSMContext):
    experience = message.text.strip()
    await state.update_data(dance_experience=experience)
    await finish_registration(message, state)

async def finish_registration(message: types.Message, state: FSMContext):
    data = await state.get_data()
    generated_id = generate_id_for_user(data)
    row = [
        generated_id,
        data.get("tg_id", message.from_user.id),
        data.get("tg_username", message.from_user.username or ""),
        data.get("tg_link", f"https://t.me/{message.from_user.username}" if message.from_user.username else ""),
        data.get("role", ""),
        data.get("name", ""),
        data.get("age", ""),
        data.get("phone", ""),
        data.get("team", ""),
        data.get("styles", ""),
        data.get("battle", ""),
        data.get("battle_style", ""),
        data.get("dance_experience", "")
    ]
    try:
        sheet.append_row(row)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    final_text = (
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n"
        f"–í–∞—à ID: <b>{generated_id}</b>\n\n"
        "ü§ó–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dance –∫–æ–º—å—é–Ω–∏—Ç–∏!\n"
        "‚úÖ–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
        "https://t.me/krygi_gel"
    )
    await message.answer(final_text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    await state.clear()

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
